{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the GoCRUD documentation! This guide will help you understand how to use GoCRUD to build powerful, scalable, and maintainable CRUD APIs with ease.</p>"},{"location":"#overview","title":"\ud83d\udcd6 Overview","text":"<p>GoCRUD is a Go module that extends the Huma framework to provide automatic CRUD API generation. It simplifies API development by automating repetitive tasks, allowing you to focus on your application's business logic.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automatic CRUD Generation: Generate RESTful endpoints for your models with minimal configuration.</li> <li>Input Validation: Built-in validation for your model fields.</li> <li>Customizable Hooks: Add custom logic before or after CRUD operations.</li> <li>Relationship Filtering: Query through model relationships with type-safe filters.</li> <li>Custom Field Operations: Define custom field-specific filtering operations.</li> <li>Database Agnostic: Supports PostgreSQL, MySQL, SQLite, and MSSQL.</li> </ul>"},{"location":"#relations-support","title":"Relations Support","text":"<p>Define relationships between your models and query through them:</p> <pre><code>type User struct {\n    ID        *int       `db:\"id\" json:\"id\"`\n    Documents []Document `db:\"documents\" src:\"id\" dest:\"userId\" table:\"documents\" json:\"-\"`\n}\n\n// Query users with specific documents\nGET /users?where={\"documents\":{\"title\":{\"_eq\":\"Doc4\"}}}\n</code></pre>"},{"location":"#custom-operations","title":"Custom Operations","text":"<p>Add custom filtering operations to your field types:</p> <pre><code>type ID int\n\nfunc (_ *ID) Operations() map[string]func(string, ...string) string {\n    return map[string]func(string, ...string) string{\n        \"_regexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s REGEXP %s\", key, values[0])\n        },\n    }\n}\n\n// Use custom operations in queries\nGET /users?where={\"id\":{\"_regexp\":\"5\"}}\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>The documentation is organized as follows:</p> <ul> <li>Introduction: Learn about GoCRUD and its core concepts.</li> <li>Getting Started: Step-by-step guide to set up and use GoCRUD in your project.</li> <li>Configuration: Detailed explanation of configuration options and examples.</li> <li>CRUD Operations: Learn how to use the generated CRUD endpoints.</li> <li>CRUD Hooks: Customize your API behavior with hooks.</li> <li>Advanced Topics: Explore advanced features and future enhancements.</li> <li>FAQ: Frequently asked questions and troubleshooting tips.</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>To get started with GoCRUD, check out the Getting Started guide. It will walk you through the installation process, model definition, and API registration.</p>"},{"location":"#contributing","title":"\ud83d\udee0\ufe0f Contributing","text":"<p>We welcome contributions to improve GoCRUD and its documentation. If you'd like to contribute, please check out the Contributing Guide.</p>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p> <p>Made with \u2764\ufe0f by KoLiBer</p>"},{"location":"FAQ/","title":"FAQ","text":""},{"location":"FAQ/#general-questions","title":"General Questions","text":""},{"location":"FAQ/#what-databases-does-gocrud-support","title":"What databases does GoCRUD support?","text":"<p>GoCRUD supports:</p> <ul> <li>PostgreSQL</li> <li>MySQL</li> <li>SQLite</li> <li>Microsoft SQL Server</li> </ul>"},{"location":"FAQ/#does-gocrud-support-patch-operations","title":"Does GoCRUD support PATCH operations?","text":"<p>Yes, through Huma's autopatch feature. Enable it with:</p> <pre><code>autopatch.AutoPatch(api)\n</code></pre>"},{"location":"FAQ/#can-i-use-custom-field-types","title":"Can I use custom field types?","text":"<p>Yes, by implementing the <code>Operations</code> method for custom filtering:</p> <pre><code>type CustomID int\n\nfunc (_ *CustomID) Operations() map[string]func(string, ...string) string {\n    return map[string]func(string, ...string) string{\n        \"_regexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s REGEXP %s\", key, values[0])\n        },\n    }\n}\n</code></pre>"},{"location":"FAQ/#common-issues","title":"Common Issues","text":""},{"location":"FAQ/#why-am-i-getting-unsupported-database-driver","title":"Why am I getting \"unsupported database driver\"?","text":"<p>Make sure you:</p> <ol> <li>Import the correct database driver</li> <li>Use the supported driver package:<ul> <li>PostgreSQL: <code>github.com/lib/pq</code></li> <li>MySQL: <code>github.com/go-sql-driver/mysql</code></li> <li>SQLite: <code>github.com/mattn/go-sqlite3</code></li> <li>MSSQL: <code>github.com/microsoft/go-mssqldb</code></li> </ul> </li> </ol>"},{"location":"FAQ/#why-arent-my-relations-working","title":"Why aren't my relations working?","text":"<p>Check that you:</p> <ol> <li>Used the correct tag format:     <pre><code>Documents []Document `db:\"documents\" src:\"id\" dest:\"userId\" table:\"documents\" json:\"-\"`\n</code></pre></li> <li>Set up the foreign key fields correctly</li> <li>Have proper database permissions</li> </ol>"},{"location":"FAQ/#why-isnt-pagination-working","title":"Why isn't pagination working?","text":"<p>Ensure you're using both <code>limit</code> and <code>skip</code>:</p> <pre><code>GET /users?limit=10&amp;skip=0\n</code></pre>"},{"location":"FAQ/#best-practices","title":"Best Practices","text":""},{"location":"FAQ/#how-should-i-structure-my-models","title":"How should I structure my models?","text":"<p>Follow these guidelines:</p> <ol> <li>Always define table name using the <code>_</code> field:     <pre><code>_    struct{} `db:\"users\" json:\"-\"`\n</code></pre></li> <li>Make ID fields pointers for proper null handling:     <pre><code>ID   *int    `db:\"id\" json:\"id\"`\n</code></pre></li> <li>Use appropriate tags for validation:     <pre><code>Age  *int    `db:\"age\" json:\"age\" minimum:\"0\" maximum:\"120\"`\n</code></pre></li> </ol>"},{"location":"FAQ/#how-can-i-optimize-performance","title":"How can I optimize performance?","text":"<ol> <li>Use bulk operations when possible</li> <li>Set appropriate limits on queries</li> <li>Add database indexes for filtered fields</li> <li>Use relationship filtering judiciously</li> </ol>"},{"location":"FAQ/#how-should-i-handle-errors","title":"How should I handle errors?","text":"<ol> <li>Use hooks for validation:     <pre><code>BeforePost: func(ctx context.Context, models *[]User) error {\n    if err := validate(models); err != nil {\n        return fmt.Errorf(\"validation failed: %w\", err)\n    }\n    return nil\n}\n</code></pre></li> <li>Return specific error types</li> <li>Log errors appropriately</li> </ol>"},{"location":"FAQ/#configuration","title":"Configuration","text":""},{"location":"FAQ/#how-do-i-disable-certain-operations","title":"How do I disable certain operations?","text":"<p>Use operation modes in config:</p> <pre><code>config := &amp;gocrud.Config[User]{\n    GetMode:    gocrud.BulkSingle,\n    PostMode:   gocrud.None,      // Disable POST\n    DeleteMode: gocrud.None,      // Disable DELETE\n}\n</code></pre>"},{"location":"FAQ/#how-do-i-add-custom-validation","title":"How do I add custom validation?","text":"<p>Use before hooks:</p> <pre><code>BeforePost: func(ctx context.Context, models *[]User) error {\n    for _, user := range *models {\n        if err := customValidation(user); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"FAQ/#advanced-usage","title":"Advanced Usage","text":""},{"location":"FAQ/#can-i-use-transactions","title":"Can I use transactions?","text":"<p>Transactions are handled automatically for:</p> <ul> <li>Bulk updates</li> <li>Bulk deletes</li> <li>Operations with hooks</li> </ul>"},{"location":"FAQ/#how-do-i-implement-custom-filtering","title":"How do I implement custom filtering?","text":"<ol> <li>Define custom operations on field types</li> <li>Use the operations in queries:     <pre><code>GET /users?where={\"id\":{\"_regexp\":\"^10.*\"}}\n</code></pre></li> </ol>"},{"location":"FAQ/#can-i-extend-the-default-operations","title":"Can I extend the default operations?","text":"<p>Yes, by:</p> <ol> <li>Implementing custom field types</li> <li>Adding hooks for custom logic</li> <li>Using the underlying repository interface</li> </ol>"},{"location":"FAQ/#troubleshooting","title":"Troubleshooting","text":""},{"location":"FAQ/#common-error-messages","title":"Common Error Messages","text":""},{"location":"FAQ/#entity-not-found","title":"\"entity not found\"","text":"<ul> <li>Check if the resource exists</li> <li>Verify the ID is correct</li> <li>Ensure proper database permissions</li> </ul>"},{"location":"FAQ/#invalid-identifier-type","title":"\"invalid identifier type\"","text":"<ul> <li>Check model field types</li> <li>Ensure ID fields are properly defined</li> <li>Verify query parameter types</li> </ul>"},{"location":"FAQ/#validation-failed","title":"\"validation failed\"","text":"<ul> <li>Check input data format</li> <li>Verify field constraints</li> <li>Look for missing required fields</li> </ul>"},{"location":"FAQ/#debug-tips","title":"Debug Tips","text":"<ol> <li>Enable debug logging</li> <li>Check SQL queries in logs</li> <li>Verify database connection</li> <li>Test queries directly in database</li> <li>Check hook execution order</li> </ol>"},{"location":"FAQ/#getting-help","title":"Getting Help","text":""},{"location":"FAQ/#where-can-i-find-more-examples","title":"Where can I find more examples?","text":"<p>Check the examples directory in the repository:</p> <ul> <li>Basic CRUD</li> <li>Relations</li> <li>Custom operations</li> <li>Different databases</li> <li>Hooks implementation</li> </ul>"},{"location":"FAQ/#how-do-i-report-issues","title":"How do I report issues?","text":"<ol> <li>Check existing issues on GitHub</li> <li>Provide minimal reproduction</li> <li>Include:<ul> <li>Go version</li> <li>Database type and version</li> <li>Complete error message</li> <li>Example code</li> </ul> </li> </ol>"},{"location":"advanced-topics/","title":"Advanced Topics","text":"<p>This guide covers advanced features and usage patterns in GoCRUD.</p>"},{"location":"advanced-topics/#model-relations","title":"Model Relations","text":"<p>GoCRUD supports one-to-one and one-to-many relationships between models.</p>"},{"location":"advanced-topics/#defining-relations","title":"Defining Relations","text":"<pre><code>type User struct {\n    _         struct{}   `db:\"users\" json:\"-\"`\n    ID        *int       `db:\"id\" json:\"id\"`\n    Documents []Document `db:\"documents\" src:\"id\" dest:\"userId\" table:\"documents\" json:\"-\"`  // One-to-many\n}\n\ntype Document struct {\n    _      struct{} `db:\"documents\" json:\"-\"`\n    ID     *int     `db:\"id\" json:\"id\"`\n    UserID int      `db:\"userId\" json:\"userId\"`\n    User   User     `db:\"user\" src:\"userId\" dest:\"id\" table:\"users\" json:\"-\"`    // One-to-one\n}\n</code></pre> <p>Relation tags:</p> <ul> <li><code>db</code>: Name of the related table</li> <li><code>src</code>: Source field in the current model</li> <li><code>dest</code>: Destination field in the related model</li> <li><code>table</code>: Target table name</li> <li><code>json</code>: Usually \"-\" to exclude from JSON</li> </ul>"},{"location":"advanced-topics/#querying-relations","title":"Querying Relations","text":"<p>Filter records based on related entities:</p> <pre><code># Find users who have documents with specific titles\nGET /users?where={\"documents\":{\"title\":{\"_eq\":\"Report\"}}}\n\n# Find documents belonging to users of a certain age\nGET /documents?where={\"user\":{\"age\":{\"_gt\":30}}}\n</code></pre>"},{"location":"advanced-topics/#custom-field-operations","title":"Custom Field Operations","text":"<p>Define custom filtering operations for specific field types:</p> <pre><code>type ID int\n\nfunc (_ *ID) Operations() map[string]func(string, ...string) string {\n    return map[string]func(string, ...string) string{\n        \"_regexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s REGEXP %s\", key, values[0])\n        },\n        \"_iregexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s IREGEXP %s\", key, values[0])\n        },\n    }\n}\n\ntype User struct {\n    ID   *ID     `db:\"id\" json:\"id\"`\n    Name *string `db:\"name\" json:\"name\"`\n}\n</code></pre> <p>Using custom operations:</p> <pre><code>GET /users?where={\"id\":{\"_regexp\":\"^10.*\"}}\n</code></pre>"},{"location":"advanced-topics/#complex-queries","title":"Complex Queries","text":""},{"location":"advanced-topics/#logical-operators","title":"Logical Operators","text":"<p>Combine multiple conditions:</p> <pre><code># AND operator\nGET /users?where={\"_and\":[{\"age\":{\"_gt\":20}},{\"name\":{\"_like\":\"J%\"}}]}\n\n# OR operator\nGET /users?where={\"_or\":[{\"age\":{\"_lt\":20}},{\"age\":{\"_gt\":60}}]}\n\n# NOT operator\nGET /users?where={\"_not\":{\"age\":{\"_eq\":30}}}\n</code></pre>"},{"location":"advanced-topics/#nested-conditions","title":"Nested Conditions","text":"<p>Create complex nested queries:</p> <pre><code>GET /users?where={\n    \"_or\": [\n        {\n            \"_and\": [\n                {\"age\": {\"_gt\": 20}},\n                {\"name\": {\"_like\": \"J%\"}}\n            ]\n        },\n        {\n            \"documents\": {\n                \"title\": {\"_like\": \"Report%\"}\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"advanced-topics/#performance-optimization","title":"Performance Optimization","text":""},{"location":"advanced-topics/#query-optimization","title":"Query Optimization","text":"<ol> <li> <p>Use Appropriate Indexes:</p> <ul> <li>Add indexes for frequently filtered fields</li> <li>Add composite indexes for common filter combinations</li> </ul> </li> <li> <p>Limit Result Sets:</p> <ul> <li>Always use pagination</li> <li>Set reasonable default limits</li> </ul> </li> </ol> <pre><code>GET /users?limit=50&amp;skip=0\n</code></pre> <ol> <li>Select Specific Fields:<ul> <li>Coming soon: Field selection support</li> <li>Will allow retrieving only needed fields</li> </ul> </li> </ol>"},{"location":"advanced-topics/#bulk-operations","title":"Bulk Operations","text":"<p>Use bulk endpoints for better performance:</p> <pre><code># Bulk create\nPOST /users\n{\n    \"body\": [\n        {\"name\": \"User1\"},\n        {\"name\": \"User2\"}\n    ]\n}\n\n# Bulk update\nPUT /users\n{\n    \"body\": [\n        {\"id\": 1, \"name\": \"Updated1\"},\n        {\"id\": 2, \"name\": \"Updated2\"}\n    ]\n}\n\n# Bulk delete\nDELETE /users?where={\"age\":{\"_lt\":18}}\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>This guide explains how to configure GoCRUD for your application's needs.</p>"},{"location":"configuration/#core-configuration","title":"Core Configuration","text":"<p>When registering your models with GoCRUD, you can provide configuration options through the <code>Config</code> struct:</p> <pre><code>type Config[Model any] struct {\n    GetMode    Mode\n    PutMode    Mode\n    PostMode   Mode\n    DeleteMode Mode\n\n    BeforeGet    func(ctx context.Context, where *map[string]any, order *map[string]any, limit *int, skip *int) error\n    BeforePut    func(ctx context.Context, models *[]Model) error\n    BeforePost   func(ctx context.Context, models *[]Model) error\n    BeforeDelete func(ctx context.Context, where *map[string]any) error\n\n    AfterGet    func(ctx context.Context, models *[]Model) error\n    AfterPut    func(ctx context.Context, models *[]Model) error\n    AfterPost   func(ctx context.Context, models *[]Model) error\n    AfterDelete func(ctx context.Context, models *[]Model) error\n}\n</code></pre>"},{"location":"configuration/#operation-modes","title":"Operation Modes","text":"<p>GoCRUD supports three operation modes for each CRUD operation:</p> <pre><code>type Mode int\n\nconst (\n    BulkSingle Mode = iota  // Both bulk and single operations enabled\n    Single                  // Only single operations enabled\n    None                    // Operation disabled\n)\n</code></pre> <p>Example configuration:</p> <pre><code>config := &amp;gocrud.Config[User]{\n    GetMode:    gocrud.BulkSingle,  // Enable both GET /users and GET /users/{id}\n    PutMode:    gocrud.Single,      // Enable only PUT /users/{id}\n    PostMode:   gocrud.BulkSingle,  // Enable both POST /users and POST /users/one\n    DeleteMode: gocrud.None,        // Disable all DELETE operations\n}\n</code></pre>"},{"location":"configuration/#hook-configuration","title":"Hook Configuration","text":"<p>Hooks allow you to add custom logic before and after CRUD operations.</p>"},{"location":"configuration/#before-hooks","title":"Before Hooks","text":"<p>Before hooks run before the database operation:</p> <pre><code>config := &amp;gocrud.Config[User]{\n    BeforePost: func(ctx context.Context, models *[]User) error {\n        // Validate age before creating users\n        for _, user := range *models {\n            if user.Age != nil &amp;&amp; *user.Age &lt; 18 {\n                return fmt.Errorf(\"users must be 18 or older\")\n            }\n        }\n        return nil\n    },\n}\n</code></pre>"},{"location":"configuration/#after-hooks","title":"After Hooks","text":"<p>After hooks run after the database operation but before the response is sent:</p> <pre><code>config := &amp;gocrud.Config[User]{\n    AfterGet: func(ctx context.Context, models *[]User) error {\n        // Modify or enrich user data\n        for i := range *models {\n            if (*models)[i].Name == nil {\n                defaultName := \"Anonymous\"\n                (*models)[i].Name = &amp;defaultName\n            }\n        }\n        return nil\n    },\n}\n</code></pre>"},{"location":"configuration/#model-configuration","title":"Model Configuration","text":"<p>Models are configured using struct tags:</p> <pre><code>type User struct {\n    _    struct{} `db:\"users\" json:\"-\"`                    // Table name\n    ID   *int     `db:\"id\" json:\"id\" required:\"false\"`     // Primary key field\n    Name *string  `db:\"name\" json:\"name,omitempty\"`        // Regular field\n    Age  *int     `db:\"age\" json:\"age\" minimum:\"0\"`        // Field with validation\n}\n</code></pre>"},{"location":"configuration/#available-tags","title":"Available Tags","text":"<p>GoCRUD uses the following core tags:</p> <ul> <li><code>db</code>: Database column name or table name (on the <code>_</code> field)</li> <li><code>json</code>: JSON field name and options (e.g., <code>-</code> or <code>omitempty</code>)</li> <li><code>src</code>: Source field name in relationships</li> <li><code>dest</code>: Destination field name in relationships</li> <li><code>table</code>: Related table name in relationships</li> </ul> <p>Additional validation tags (like <code>required</code>, <code>minimum</code>, <code>maximum</code>, etc.) are available through the Huma framework validation tags.</p>"},{"location":"configuration/#relation-configuration","title":"Relation Configuration","text":"<p>For related models, additional tags are used:</p> <pre><code>type User struct {\n    _         struct{}   `db:\"users\" json:\"-\"`\n    ID        *int       `db:\"id\" json:\"id\"`\n    Documents []Document `db:\"documents\" src:\"id\" dest:\"userId\" table:\"documents\" json:\"-\"`\n}\n</code></pre> <p>Relation tags:</p> <ul> <li><code>src</code>: Source field name in the current table</li> <li><code>dest</code>: Destination field name in the related table</li> <li><code>table</code>: Related table name</li> </ul>"},{"location":"configuration/#custom-field-operations","title":"Custom Field Operations","text":"<p>Define custom operations for field types:</p> <pre><code>type CustomID int\n\nfunc (_ *CustomID) Operations() map[string]func(string, ...string) string {\n    return map[string]func(string, ...string) string{\n        \"_regexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s REGEXP %s\", key, values[0])\n        },\n    }\n}\n</code></pre>"},{"location":"configuration/#database-configuration","title":"Database Configuration","text":"<p>GoCRUD automatically configures itself based on the database driver:</p> <pre><code>import (\n    \"database/sql\"\n    _ \"github.com/lib/pq\"        // PostgreSQL\n    _ \"github.com/go-sql-driver/mysql\"  // MySQL\n    _ \"github.com/mattn/go-sqlite3\"     // SQLite\n    _ \"github.com/microsoft/go-mssqldb\" // MSSQL\n)\n\n// Database connection\ndb, err := sql.Open(\"postgres\", \"postgres://user:pass@localhost:5432/dbname\")\n\n// Repository creation\nrepo := gocrud.NewSQLRepository[User](db)\n</code></pre> <p>The SQL dialect and parameter style are automatically configured based on the driver.</p>"},{"location":"crud-hooks/","title":"CRUD Hooks","text":"<p>CRUD hooks allow you to add custom logic that executes before or after CRUD operations. This guide explains how to use hooks effectively in your GoCRUD applications.</p>"},{"location":"crud-hooks/#available-hooks","title":"Available Hooks","text":"<p>GoCRUD provides both \"before\" and \"after\" hooks for each CRUD operation:</p>"},{"location":"crud-hooks/#before-hooks","title":"Before Hooks","text":"<ul> <li><code>BeforeGet</code>: Executes before retrieving resources</li> <li><code>BeforePut</code>: Executes before updating resources</li> <li><code>BeforePost</code>: Executes before creating resources</li> <li><code>BeforeDelete</code>: Executes before deleting resources</li> </ul>"},{"location":"crud-hooks/#after-hooks","title":"After Hooks","text":"<ul> <li><code>AfterGet</code>: Executes after retrieving resources</li> <li><code>AfterPut</code>: Executes after updating resources</li> <li><code>AfterPost</code>: Executes after creating resources</li> <li><code>AfterDelete</code>: Executes after deleting resources</li> </ul>"},{"location":"crud-hooks/#hook-signatures","title":"Hook Signatures","text":"<p>Each hook type has a specific function signature:</p> <pre><code>// Get operation hooks\nBeforeGet func(ctx context.Context, where *map[string]any, order *map[string]any, limit *int, skip *int) error\nAfterGet  func(ctx context.Context, models *[]Model) error\n\n// Put operation hooks\nBeforePut func(ctx context.Context, models *[]Model) error\nAfterPut  func(ctx context.Context, models *[]Model) error\n\n// Post operation hooks\nBeforePost func(ctx context.Context, models *[]Model) error\nAfterPost  func(ctx context.Context, models *[]Model) error\n\n// Delete operation hooks\nBeforeDelete func(ctx context.Context, where *map[string]any) error\nAfterDelete  func(ctx context.Context, models *[]Model) error\n</code></pre>"},{"location":"crud-hooks/#using-hooks","title":"Using Hooks","text":""},{"location":"crud-hooks/#basic-hook-configuration","title":"Basic Hook Configuration","text":"<p>Here's how to configure hooks when registering your model:</p> <pre><code>gocrud.Register(api, repo, &amp;gocrud.Config[User]{\n    BeforePost: func(ctx context.Context, models *[]User) error {\n        // Add validation logic here\n        return nil\n    },\n    AfterPost: func(ctx context.Context, models *[]User) error {\n        // Add post-processing logic here\n        return nil\n    },\n})\n</code></pre>"},{"location":"crud-hooks/#common-use-cases","title":"Common Use Cases","text":""},{"location":"crud-hooks/#input-validation","title":"Input Validation","text":"<pre><code>BeforePost: func(ctx context.Context, models *[]User) error {\n    for _, user := range *models {\n        if user.Age != nil &amp;&amp; *user.Age &lt; 18 {\n            return fmt.Errorf(\"users must be 18 or older\")\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"crud-hooks/#data-enrichment","title":"Data Enrichment","text":"<pre><code>AfterGet: func(ctx context.Context, models *[]User) error {\n    for i := range *models {\n        if (*models)[i].Name == nil {\n            defaultName := \"Anonymous\"\n            (*models)[i].Name = &amp;defaultName\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"crud-hooks/#access-control","title":"Access Control","text":"<pre><code>BeforeGet: func(ctx context.Context, where *map[string]any, order *map[string]any, limit *int, skip *int) error {\n    userID := ctx.Value(\"userID\").(string)\n    if userID == \"\" {\n        return fmt.Errorf(\"unauthorized\")\n    }\n    return nil\n}\n</code></pre>"},{"location":"crud-hooks/#audit-logging","title":"Audit Logging","text":"<pre><code>AfterDelete: func(ctx context.Context, models *[]User) error {\n    for _, user := range *models {\n        log.Printf(\"User deleted: ID=%v\", *user.ID)\n    }\n    return nil\n}\n</code></pre>"},{"location":"crud-hooks/#hook-execution-order","title":"Hook Execution Order","text":"<ol> <li> <p>Before hooks execute first, allowing you to:</p> <ul> <li>Validate input</li> <li>Modify query parameters</li> <li>Check permissions</li> <li>Cancel the operation by returning an error</li> </ul> </li> <li> <p>The main operation executes only if the before hook succeeds</p> </li> <li> <p>After hooks execute last, allowing you to:</p> <ul> <li>Modify returned data</li> <li>Trigger side effects</li> <li>Log operations</li> <li>Send notifications</li> </ul> </li> </ol>"},{"location":"crud-hooks/#error-handling","title":"Error Handling","text":"<ul> <li>Any error returned from a hook will stop the operation</li> <li>Before hook errors prevent the main operation from executing</li> <li>After hook errors are returned to the client even though the main operation succeeded</li> </ul> <p>Example error handling:</p> <pre><code>BeforePut: func(ctx context.Context, models *[]User) error {\n    for _, user := range *models {\n        if err := validateUser(user); err != nil {\n            return fmt.Errorf(\"validation failed: %w\", err)\n        }\n    }\n    return nil\n}\n</code></pre>"},{"location":"crud-hooks/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Keep Hooks Focused: Each hook should have a single responsibility</p> </li> <li> <p>Handle Errors Gracefully: Always return meaningful error messages</p> </li> <li> <p>Use Context: Leverage context for request-scoped data</p> </li> <li> <p>Consider Performance: Avoid expensive operations in hooks</p> </li> <li> <p>Be Careful with Mutations:</p> <ul> <li>Before hooks: Modify input parameters only when necessary</li> <li>After hooks: Be cautious when modifying returned data</li> </ul> </li> </ol>"},{"location":"crud-hooks/#example-complete-hook-configuration","title":"Example: Complete Hook Configuration","text":"<pre><code>config := &amp;gocrud.Config[User]{\n    BeforeGet: func(ctx context.Context, where *map[string]any, order *map[string]any, limit *int, skip *int) error {\n        // Add query restrictions\n        return nil\n    },\n    AfterGet: func(ctx context.Context, models *[]User) error {\n        // Enrich returned data\n        return nil\n    },\n    BeforePost: func(ctx context.Context, models *[]User) error {\n        // Validate new resources\n        return nil\n    },\n    AfterPost: func(ctx context.Context, models *[]User) error {\n        // Send notifications\n        return nil\n    },\n    BeforePut: func(ctx context.Context, models *[]User) error {\n        // Validate updates\n        return nil\n    },\n    AfterPut: func(ctx context.Context, models *[]User) error {\n        // Log changes\n        return nil\n    },\n    BeforeDelete: func(ctx context.Context, where *map[string]any) error {\n        // Check delete permissions\n        return nil\n    },\n    AfterDelete: func(ctx context.Context, models *[]User) error {\n        // Cleanup related resources\n        return nil\n    },\n}\n</code></pre>"},{"location":"crud-operations/","title":"CRUD Operations","text":"<p>This guide details the CRUD operations available in GoCRUD and how to use them effectively.</p>"},{"location":"crud-operations/#get-operations","title":"GET Operations","text":""},{"location":"crud-operations/#get-single-resource","title":"Get Single Resource","text":"<p>Retrieves a single resource by its ID.</p> <pre><code>GET /users/{id}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"age\": 30\n    }\n}\n</code></pre>"},{"location":"crud-operations/#get-multiple-resources","title":"Get Multiple Resources","text":"<p>Retrieves multiple resources with filtering, sorting, and pagination.</p> <pre><code>GET /users?where={\"age\":{\"_gt\":25}}&amp;order={\"name\":\"ASC\"}&amp;limit=10&amp;skip=0\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": [\n        {\n            \"id\": 1,\n            \"name\": \"Alice\",\n            \"age\": 28\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Bob\",\n            \"age\": 32\n        }\n    ]\n}\n</code></pre>"},{"location":"crud-operations/#query-parameters","title":"Query Parameters","text":"<ul> <li><code>where</code>: JSON object for filtering</li> <li><code>order</code>: JSON object for sorting</li> <li><code>limit</code>: Maximum number of items to return</li> <li><code>skip</code>: Number of items to skip</li> </ul>"},{"location":"crud-operations/#filtering-operators","title":"Filtering Operators","text":"<ul> <li><code>_eq</code>: Equal to</li> <li><code>_neq</code>: Not equal to</li> <li><code>_gt</code>: Greater than</li> <li><code>_gte</code>: Greater than or equal to</li> <li><code>_lt</code>: Less than</li> <li><code>_lte</code>: Less than or equal to</li> <li><code>_like</code>: LIKE pattern matching</li> <li><code>_nlike</code>: NOT LIKE pattern matching</li> <li><code>_ilike</code>: Case-insensitive LIKE</li> <li><code>_nilike</code>: Case-insensitive NOT LIKE</li> <li><code>_in</code>: In array</li> <li><code>_nin</code>: Not in array</li> </ul>"},{"location":"crud-operations/#post-operations","title":"POST Operations","text":""},{"location":"crud-operations/#create-single-resource","title":"Create Single Resource","text":"<p>Creates a single resource.</p> <pre><code>POST /users/one\nContent-Type: application/json\n\n{\n    \"body\": {\n        \"name\": \"John Doe\",\n        \"age\": 30\n    }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"age\": 30\n    }\n}\n</code></pre>"},{"location":"crud-operations/#create-multiple-resources","title":"Create Multiple Resources","text":"<p>Creates multiple resources in a single request.</p> <pre><code>POST /users\nContent-Type: application/json\n\n{\n    \"body\": [\n        {\n            \"name\": \"John Doe\",\n            \"age\": 30\n        },\n        {\n            \"name\": \"Jane Smith\",\n            \"age\": 25\n        }\n    ]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Doe\",\n            \"age\": 30\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Jane Smith\",\n            \"age\": 25\n        }\n    ]\n}\n</code></pre>"},{"location":"crud-operations/#put-operations","title":"PUT Operations","text":""},{"location":"crud-operations/#update-single-resource","title":"Update Single Resource","text":"<p>Updates a single resource by its ID.</p> <pre><code>PUT /users/{id}\nContent-Type: application/json\n\n{\n    \"body\": {\n        \"name\": \"John Smith\",\n        \"age\": 31\n    }\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"age\": 31\n    }\n}\n</code></pre>"},{"location":"crud-operations/#update-multiple-resources","title":"Update Multiple Resources","text":"<p>Updates multiple resources in a single request.</p> <pre><code>PUT /users\nContent-Type: application/json\n\n{\n    \"body\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Smith\",\n            \"age\": 31\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Jane Doe\",\n            \"age\": 26\n        }\n    ]\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": [\n        {\n            \"id\": 1,\n            \"name\": \"John Smith\",\n            \"age\": 31\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Jane Doe\",\n            \"age\": 26\n        }\n    ]\n}\n</code></pre>"},{"location":"crud-operations/#delete-operations","title":"DELETE Operations","text":""},{"location":"crud-operations/#delete-single-resource","title":"Delete Single Resource","text":"<p>Deletes a single resource by its ID.</p> <pre><code>DELETE /users/{id}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": {\n        \"id\": 1,\n        \"name\": \"John Smith\",\n        \"age\": 31\n    }\n}\n</code></pre>"},{"location":"crud-operations/#delete-multiple-resources","title":"Delete Multiple Resources","text":"<p>Deletes multiple resources based on filtering criteria.</p> <pre><code>DELETE /users?where={\"age\":{\"_lt\":25}}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"body\": [\n        {\n            \"id\": 3,\n            \"name\": \"Alice Young\",\n            \"age\": 22\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Bob Junior\",\n            \"age\": 21\n        }\n    ]\n}\n</code></pre>"},{"location":"crud-operations/#advanced-queries","title":"Advanced Queries","text":""},{"location":"crud-operations/#relation-filtering","title":"Relation Filtering","text":"<p>Filter resources based on related entities:</p> <pre><code>GET /users?where={\"documents\":{\"title\":{\"_like\":\"Report%\"}}}\n</code></pre>"},{"location":"crud-operations/#custom-operations","title":"Custom Operations","text":"<p>Use custom field operations if defined:</p> <pre><code>GET /users?where={\"id\":{\"_regexp\":\"^10.*\"}}\n</code></pre>"},{"location":"crud-operations/#complex-filters","title":"Complex Filters","text":"<p>Combine multiple conditions:</p> <pre><code>GET /users?where={\"_and\":[{\"age\":{\"_gt\":20}},{\"name\":{\"_like\":\"J%\"}}]}\n</code></pre> <p>Use OR conditions:</p> <pre><code>GET /users?where={\"_or\":[{\"age\":{\"_lt\":20}},{\"age\":{\"_gt\":60}}]}\n</code></pre> <p>Use NOT conditions:</p> <pre><code>GET /users?where={\"_not\":{\"age\":{\"_eq\":30}}}\n</code></pre>"},{"location":"crud-operations/#error-handling","title":"Error Handling","text":"<p>Common error responses:</p> <ul> <li><code>400 Bad Request</code>: Invalid input data</li> <li><code>404 Not Found</code>: Resource not found</li> <li><code>422 Unprocessable Entity</code>: Validation error</li> <li><code>500 Internal Server Error</code>: Server error</li> </ul> <p>Error response format:</p> <pre><code>{\n    \"error\": {\n        \"code\": \"NOT_FOUND\",\n        \"message\": \"entity not found\"\n    }\n}\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install GoCRUD using <code>go get</code>:</p> <pre><code>go get github.com/ckoliber/gocrud\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#1-define-your-model","title":"1. Define Your Model","text":"<pre><code>type User struct {\n    _    struct{} `db:\"users\" json:\"-\"`     // Table name\n    ID   *int     `db:\"id\" json:\"id\"`       // Primary key\n    Name *string  `db:\"name\" json:\"name\"`   // Regular field\n    Age  *int     `db:\"age\" json:\"age\"`     // Regular field\n}\n</code></pre>"},{"location":"getting-started/#2-initialize-database","title":"2. Initialize Database","text":"<pre><code>import (\n    \"database/sql\"\n    _ \"github.com/lib/pq\"  // Or any other database driver\n)\n\ndb, err := sql.Open(\"postgres\", \"postgres://user:pass@localhost:5432/dbname\")\nif err != nil {\n    panic(err)\n}\n</code></pre>"},{"location":"getting-started/#3-register-your-api","title":"3. Register Your API","text":"<pre><code>import (\n    \"github.com/ckoliber/gocrud\"\n    \"github.com/danielgtaylor/huma/v2\"\n)\n\nfunc main() {\n    api := huma.New(\"My API\", \"1.0.0\")\n\n    // Create repository and register routes\n    repo := gocrud.NewSQLRepository[User](db)\n    gocrud.Register(api, repo, &amp;gocrud.Config[User]{})\n\n    api.Serve()\n}\n</code></pre>"},{"location":"getting-started/#available-endpoints","title":"Available Endpoints","text":"<p>Your API now has these endpoints:</p> <ul> <li><code>GET /users</code> - List users (with filtering, pagination)</li> <li><code>GET /users/{id}</code> - Get single user</li> <li><code>PUT /users</code> - Update multiple users</li> <li><code>PUT /users/{id}</code> - Update user</li> <li><code>POST /users</code> - Create multiple users</li> <li><code>POST /users/one</code> - Create single user</li> <li><code>DELETE /users</code> - Delete multiple users (with filtering)</li> <li><code>DELETE /users/{id}</code> - Delete user</li> </ul>"},{"location":"getting-started/#query-parameters","title":"Query Parameters","text":""},{"location":"getting-started/#filtering","title":"Filtering","text":"<p>Use the <code>where</code> parameter for filtering:</p> <pre><code>GET /users?where={\"age\":{\"_gt\":18}}\nGET /users?where={\"name\":{\"_like\":\"John%\"}}\n</code></pre>"},{"location":"getting-started/#pagination","title":"Pagination","text":"<p>Use <code>limit</code> and <code>skip</code> for pagination:</p> <pre><code>GET /users?limit=10&amp;skip=20\n</code></pre>"},{"location":"getting-started/#sorting","title":"Sorting","text":"<p>Use <code>order</code> for sorting:</p> <pre><code>GET /users?order={\"name\":\"ASC\",\"age\":\"DESC\"}\n</code></pre>"},{"location":"getting-started/#advanced-models","title":"Advanced Models","text":""},{"location":"getting-started/#relations","title":"Relations","text":"<p>Define models with relationships:</p> <pre><code>type User struct {\n    _         struct{}   `db:\"users\" json:\"-\"`\n    ID        *int       `db:\"id\" json:\"id\"`\n    Name      *string    `db:\"name\" json:\"name\"`\n    Documents []Document `db:\"documents\" src:\"id\" dest:\"userId\" table:\"documents\" json:\"-\"`\n}\n\ntype Document struct {\n    _      struct{} `db:\"documents\" json:\"-\"`\n    ID     *int     `db:\"id\" json:\"id\"`\n    Title  string   `db:\"title\" json:\"title\"`\n    UserID int      `db:\"userId\" json:\"userId\"`\n}\n</code></pre> <p>Query through relations:</p> <pre><code>GET /users?where={\"documents\":{\"title\":{\"_eq\":\"Report\"}}}\n</code></pre>"},{"location":"getting-started/#custom-operations","title":"Custom Operations","text":"<p>Add custom filtering operations:</p> <pre><code>type ID int\n\nfunc (_ *ID) Operations() map[string]func(string, ...string) string {\n    return map[string]func(string, ...string) string{\n        \"_regexp\": func(key string, values ...string) string {\n            return fmt.Sprintf(\"%s REGEXP %s\", key, values[0])\n        },\n    }\n}\n\n// Use in queries\nGET /users?where={\"id\":{\"_regexp\":\"^10.*\"}}\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out CRUD Operations for detailed API usage</li> <li>Learn about Configuration options</li> <li>Explore CRUD Hooks for custom logic</li> </ul>"}]}